{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","store.tsx","index.tsx"],"names":["AddItemForm","React","memo","props","console","log","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","color","autoFocus","changeTitle","onBlur","onDoubleClick","Todolist","addTask","useCallback","todolistID","onAllClickHandler","setFilterValue","onActiveClickHandler","onCompletedClickHandler","changeTlTitle","editTitle","changeTodolistTitle","TasksForTodolist","tasks","filter","t","isDone","removeTodolist","Delete","style","listStyle","padding","map","id","className","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Button","marginRight","todolistID_1","v1","todolistID_2","initialState","AppWithRedux","dispatch","useDispatch","todoListsData","useSelector","state","todolists","tasksData","RemoveTask","taskId","action","type","tasksId","todolistId","AddTask","addTaskAC","SetFilterValue","changeTodolistFilterAC","changeTodolistTitleAC","ChangeStatus","isDoneValue","changeTaskStatusAC","changeTaskTitleAC","RemoveTodolist","AddTodolist","addTodolistAC","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","tl","item","Paper","elevation","Boolean","window","location","hostname","match","RootReducer","combineReducers","copyState","newTask","updateTask","task","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uTASaA,EAA8CC,IAAMC,MAAM,SAACC,GACpEC,QAAQC,IAAI,0BADkE,MAE1CC,mBAAiB,IAFyB,mBAEvEC,EAFuE,KAE3DC,EAF2D,OAGpDF,mBAAwB,MAH4B,mBAGvEG,EAHuE,KAGhEC,EAHgE,KAKxEC,EAAU,WACRJ,EAAWK,QACXT,EAAMQ,QAAQJ,GACdC,EAAc,KAEdE,EAAS,sBAgBjB,OACI,6BACI,kBAACG,EAAA,EAAD,CACIC,QAAS,WACTC,MAAOR,EACPS,SAhBY,SAACC,GAAD,OAAqCT,EAAcS,EAAEC,cAAcH,QAiB/EI,WAhBc,SAACF,GAIvBP,EAAS,MACK,UAAVO,EAAEG,KACFT,KAYIU,MAAO,QACPZ,QAASA,EACTa,WAAYb,IAQhB,kBAACc,EAAA,EAAD,CAAYC,QAASb,GACjB,kBAACc,EAAA,EAAD,WC9CHC,EAAgD,SAACvB,GAAW,IAAD,EAEpCG,oBAAkB,GAFkB,mBAE7DqB,EAF6D,KAEnDC,EAFmD,OAG1CtB,mBAAiBH,EAAM0B,OAHmB,mBAG7DA,EAH6D,KAGtDC,EAHsD,OAI1CxB,mBAAwB,MAJkB,mBAI7DG,EAJ6D,KAItDC,EAJsD,KA4BpE,OACIiB,EAOI,kBAACd,EAAA,EAAD,CACIkB,MAAO,UACPjB,QAAS,WACTC,MAAOc,EACPG,WAAW,EACXhB,SAzBY,SAACC,GAAD,OAAqCa,EAASb,EAAEC,cAAcH,QA0B1EI,WAzBc,SAACF,GACT,UAAVA,EAAEG,MACES,GACAD,GAAY,GACZzB,EAAM8B,YAAYJ,IAElBnB,EAAS,uBAoBTwB,OApCQ,WACZL,GACAD,GAAY,GACZzB,EAAM8B,YAAYJ,IAElBnB,EAAS,sBAgCLD,QAASA,EACTa,WAAYb,IAEd,0BAAM0B,cAzCG,kBAAMP,GAAY,KAyCOzB,EAAM0B,Q,2BC3BzCO,EAAwCnC,IAAMC,MAAK,SAACC,GAC7DC,QAAQC,IAAI,uBACZ,IAAMgC,EAAUC,uBAAY,SAACT,GACzB1B,EAAMkC,QAAQR,EAAO1B,EAAMoC,cAC5B,CAACpC,EAAMkC,QAASlC,EAAMoC,aAEnBC,EAAoBF,uBAAY,kBAAMnC,EAAMsC,eAAe,MAAOtC,EAAMoC,cAAa,CAACpC,EAAMsC,eAAgBtC,EAAMoC,aAClHG,EAAuBJ,uBAAY,kBAAMnC,EAAMsC,eAAe,SAAUtC,EAAMoC,cAAa,CAACpC,EAAMsC,eAAgBtC,EAAMoC,aACxHI,EAA0BL,uBAAY,kBAAMnC,EAAMsC,eAAe,YAAatC,EAAMoC,cAAa,CAACpC,EAAMsC,eAAgBtC,EAAMoC,aAE9HK,EAAgBN,uBAAY,SAACO,GAC/B1C,EAAM2C,oBAAoBD,EAAW1C,EAAMoC,cAC7C,CAACpC,EAAMoC,WAAYpC,EAAM2C,sBAiBvBC,EAAoB5C,EAAM6C,MAQ9B,MAPqB,WAAjB7C,EAAM8C,SACNF,EAAoB5C,EAAM6C,MAAMC,QAAO,SAAAC,GAAC,OAAKA,EAAEC,WAE9B,cAAjBhD,EAAM8C,SACNF,EAAoB5C,EAAM6C,MAAMC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAI9C,6BACI,4BAAI,kBAAC,EAAD,CAActB,MAAO1B,EAAM0B,MAAOI,YAAaW,IAC/C,kBAACrB,EAAA,EAAD,CAAYC,QAAS,WACjBrB,EAAMiD,eAAejD,EAAMoC,cAE3B,kBAACc,EAAA,EAAD,QAGR,kBAACrD,EAAD,CAAaW,QAAS0B,IAEtB,wBAAIiB,MAAO,CAACC,UAAW,OAAQC,QAAS,IAGhCT,EAAiBU,KAAI,SAAAP,GAUjB,OACI,wBAAI9B,IAAK8B,EAAEQ,GAAIC,UAAWT,EAAEC,OAAS,SAAW,IAC5C,kBAACS,EAAA,EAAD,CACI7B,MAAO,UACP8B,QAASX,EAAEC,OACXnC,SAba,SAACC,GACtBd,EAAM2D,aAAaZ,EAAEQ,GAAIzC,EAAEC,cAAc2C,QAAS1D,EAAMoC,eAcpD,kBAAC,EAAD,CAAcV,MAAOqB,EAAErB,MAAOI,YAXd,SAACY,GACrB1C,EAAM4D,gBAAgBb,EAAEQ,GAAIb,EAAW1C,EAAMoC,eAWzC,kBAAChB,EAAA,EAAD,CAAYC,QAjBD,kBAAMrB,EAAM6D,WAAWd,EAAEQ,GAAIvD,EAAMoC,cAkB1C,kBAACc,EAAA,EAAD,YAOxB,6BACI,kBAACY,EAAA,EAAD,CAAQX,MAAO,CAACY,YAAa,OACrBnC,MAAO,UACPjB,QAA0B,QAAjBX,EAAM8C,OAAmB,YAAc,WAChDzB,QAASgB,GAHjB,OAIA,kBAACyB,EAAA,EAAD,CAAQX,MAAO,CAACY,YAAa,OACrBnC,MAAO,UACPjB,QAA0B,WAAjBX,EAAM8C,OAAsB,YAAc,WACnDzB,QAASkB,GAHjB,UAIA,kBAACuB,EAAA,EAAD,CAAQX,MAAO,CAACY,YAAa,OACrBnC,MAAO,UACPjB,QAA0B,cAAjBX,EAAM8C,OAAyB,YAAc,WACtDzB,QAASmB,GAHjB,kB,uFC7EHwB,EAAeC,cACfC,EAAeD,cAGtBE,EAAoC,CACtC,CAACZ,GAAIS,EAActC,MAAO,gBAAiBoB,OAAQ,OACnD,CAACS,GAAIW,EAAcxC,MAAO,cAAeoB,OAAQ,Q,QCJ/CqB,GAAY,mBACbH,EAAe,CACZ,CAACT,GAAIU,cAAMvC,MAAO,KAAMsB,QAAQ,GAChC,CAACO,GAAIU,cAAMvC,MAAO,MAAOsB,QAAQ,GACjC,CAACO,GAAIU,cAAMvC,MAAO,QAASsB,QAAQ,KAJzB,cAMbkB,EAAe,CACZ,CAACX,GAAIU,cAAMvC,MAAO,OAAQsB,QAAQ,GAClC,CAACO,GAAIU,cAAMvC,MAAO,QAASsB,QAAQ,GACnC,CAACO,GAAIU,cAAMvC,MAAO,OAAQsB,QAAQ,KATxB,G,QCsHHoB,MAnIf,WACInE,QAAQC,IAAI,kBAEZ,IAAMmE,EAAWC,cAEXC,EAAgBC,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,aAClFC,EAAYH,aAA8C,SAAAC,GAAK,OAAIA,EAAM5B,SAIzE+B,EAAazC,uBAAY,SAAC0C,EAAgBzC,GAC5C,IAAM0C,EDuEH,CAACC,KAAM,cAAeC,QCvEGH,EDuEMI,WCvEE7C,GACpCiC,EAASS,KACV,CAACT,IAEEa,EAAU/C,uBAAY,SAACT,EAAcU,GACvC,IAAM0C,EDoEW,SAACpD,EAAeuD,GACrC,MAAO,CAACF,KAAM,WAAYrD,QAAOuD,cCrEdE,CAAUzD,EAAOU,GAChCiC,EAASS,KACV,CAACT,IAEEe,EAAiBjD,uBAAY,SAACW,EAAyBS,GACzD,IAAMuB,EF8CwB,SAAChC,EAAyBS,GAC5D,MAAO,CAACwB,KAAM,yBAA0BxB,KAAIT,UE/CzBuC,CAAuBvC,EAAQS,GAC9Cc,EAASS,KACV,CAACT,IAEE1B,EAAsBR,uBAAY,SAACO,EAAmBa,GACxD,IAAMuB,EFqCuB,SAACpC,EAAmBa,GACrD,MAAO,CAACwB,KAAM,wBAAyBxB,KAAIb,aEtCxB4C,CAAsB5C,EAAWa,GAChDc,EAASS,KACV,CAACT,IAEEkB,EAAepD,uBAAY,SAAC0C,EAAgBW,EAAqBpD,GACnE,IAAM0C,EDwDoB,SAACD,EAAgB7B,EAAiBiC,GAChE,MAAO,CAACF,KAAM,qBAAsBF,SAAQ7B,SAAQiC,cCzDjCQ,CAAmBZ,EAAOW,EAAYpD,GACrDiC,EAASS,KACV,CAACT,IAEET,EAAkBzB,uBAAY,SAAC0C,EAAgBnC,EAAkBuC,GACnE,IAAMH,EDsDmB,SAACD,EAAgBnD,EAAeuD,GAC7D,MAAO,CAACF,KAAM,oBAAqBF,SAAQnD,QAAOuD,cCvD/BS,CAAkBb,EAAOnC,EAAUuC,GAClDZ,EAASS,KACV,CAACT,IAEEsB,EAAiBxD,uBAAY,SAACC,GAChC,IAAM0C,EFeH,CAACC,KAAM,kBAAmBxB,GEfGnB,GAChCiC,EAASS,KACV,CAACT,IAEEuB,EAAczD,uBAAY,SAACT,GAC7B,IAAMoD,EFae,SAACpD,GAC1B,MAAO,CAACqD,KAAM,eAAgBrD,QAAOuD,WAAYhB,eEd9B4B,CAAcnE,GAC7B2C,EAASS,KACV,CAACT,IAEJ,OACI,yBAAKb,UAAU,OACX,kBAACsC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAAS7C,MAAO,CAAC8C,eAAgB,kBAC7B,kBAAC7E,EAAA,EAAD,CAAY8E,KAAK,QAAQtE,MAAM,UAAUuE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY1F,QAAQ,MAApB,aAGA,kBAACmD,EAAA,EAAD,CAAQlC,MAAM,UAAUjB,QAAS,YAAjC,WAIR,kBAAC2F,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACtD,MAAO,CAACE,QAAS,SAC7B,kBAACxD,EAAD,CAAaW,QAASoF,KAG1B,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAEjBnC,EAAcjB,KAAI,SAAAqD,GAyBd,IAAI/D,EAAmB+B,EAAUgC,EAAGpD,IAGpC,OACI,kBAACiD,EAAA,EAAD,CAAMI,MAAI,EAAC3F,IAAK0F,EAAGpD,IACf,kBAACsD,EAAA,EAAD,CAAOC,UAAW,EAAG3D,MAAO,CAACE,QAAS,SAClC,kBAACpB,EAAD,CACIhB,IAAK0F,EAAGpD,GACR7B,MAAOiF,EAAGjF,MACVU,WAAYuE,EAAGpD,GAEfV,MAAOD,EACPiB,WAAYe,EACZtC,eAAgB8C,EAChBlD,QAASgD,EACTvB,aAAc4B,EACdzC,OAAQ6D,EAAG7D,OACXG,eAAgB0C,EAChB/B,gBAAiBA,EACjBjB,oBAAqBA,aCjI7CoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZAC,EAAcC,YAAgB,CAChC3C,UJuC4B,WAA0F,IAAzFD,EAAwF,uDAA3DN,EAAcW,EAA6C,uCACrH,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAON,EAAM3B,QAAO,SAAA6D,GAAE,OAAIA,EAAGpD,KAAOuB,EAAOvB,MAE/C,IAAK,eACD,MAAM,CAAE,CACJA,GAAIuB,EAAOG,WACXvD,MAAOoD,EAAOpD,MACdoB,OAAQ,QAHZ,mBAIM2B,IASV,IAAK,wBACD,OAAOA,EAAMnB,KAAI,SAAAqD,GAAE,OAAIA,EAAGpD,KAAOuB,EAAOvB,GAAjB,2BAA0BoD,GAA1B,IAA8BjF,MAAOoD,EAAOpC,YAAaiE,KAQpF,IAAK,yBACD,OAAOlC,EAAMnB,KAAI,SAAAqD,GAAE,OAAIA,EAAGpD,KAAOuB,EAAOvB,GAAjB,2BAA0BoD,GAA1B,IAA8B7D,OAAQgC,EAAOhC,SAAU6D,KAClF,QACI,OAAOlC,IIrEf5B,MH4CwB,WAAgF,IAA/E4B,EAA8E,uDAAtDN,EAAcW,EAAwC,uCACvG,OAAQA,EAAOC,MACX,IAAK,cACD,IAAIuC,EAAS,eAAO7C,GAEpB,OADA6C,EAAUxC,EAAOG,YAAcqC,EAAUxC,EAAOG,YAAYnC,QAAO,SAAAC,GAAC,OAAIA,EAAEQ,KAAOuB,EAAOE,WACjFsC,EAGX,IAAK,WACD,IAAIC,EAAU,CAAChE,GAAIU,cAAMvC,MAAOoD,EAAOpD,MAAOsB,QAAQ,GACtD,OAAO,2BAAIyB,GAAX,kBAAmBK,EAAOG,WAA1B,CAAwCsC,GAAxC,mBAAoD9C,EAAMK,EAAOG,gBAErE,IAAK,qBAED,IAAIqC,EAAS,eAAO7C,GAChB+C,EAAaF,EAAUxC,EAAOG,YAAY3B,KAAI,SAAAmE,GAC9C,OAAIA,EAAKlE,KAAOuB,EAAOD,OACZ,2BAAI4C,GAAX,IAAiBzE,OAAQ8B,EAAO9B,SAEzByE,KAGf,OAAO,2BACAhD,GADP,kBAEKK,EAAOG,WAAauC,IAI7B,IAAK,oBACD,IAAIF,EAAS,eAAO7C,GAChB5B,EAAQyE,EAAUxC,EAAOG,YACzBwC,EAAO5E,EAAM6E,MAAK,SAAA3E,GAAC,OAAIA,EAAEQ,KAAOuB,EAAOD,UAO3C,OAHI4C,IACAA,EAAK/F,MAAQoD,EAAOpD,OAEjB4F,EACX,IAAK,eACD,IAAIA,EAAS,eAAO7C,GAEpB,OADA6C,EAAUxC,EAAOG,YAAc,GACxBqC,EAEX,IAAK,kBACD,IAAIA,EAAS,eAAO7C,GAEpB,cADO6C,EAAUxC,EAAOvB,IACjB+D,EAEX,QACI,OAAO7C,MG1FNkD,EAAQC,YAAYR,GAIjCJ,OAAOW,MAAQA,ECRfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAGFI,SAASC,eAAe,SF8HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjI,GACLL,QAAQK,MAAMA,EAAMkI,c","file":"static/js/main.6046407d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo( (props) => {\r\n    console.log('AddItemForm is calling')\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const addItem = () => {\r\n        if (inputValue.trim()) {\r\n            props.addItem(inputValue);\r\n            setInputValue('');\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>)=>(setInputValue(e.currentTarget.value));\r\n    const onKeyPressHandler = (e: KeyboardEvent) => {\r\n       /* if (error !== null){\r\n            setError(null);\r\n        }*/\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={inputValue}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                /*className={error ? \"error\" : \"\"}*/ //rudiment\r\n                label={\"title\"}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            {/*<input value={inputValue}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />*/}\r\n            {/*<button onClick={addItem}>+</button>*/}\r\n            <IconButton onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className={\"error-message\"}>Title is required</div>}*/}\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (editTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        if (title) {\r\n            setEditMode(false);\r\n            props.changeTitle(title);\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>)=>(setTitle(e.currentTarget.value));\r\n    const onKeyPressHandler = (e: KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            if (title){\r\n                setEditMode(false);\r\n                props.changeTitle(title);\r\n            } else {\r\n                setError(\"Title is required\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? /*<input\r\n            value={title}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n            onBlur={offEditMode}\r\n            />*/\r\n            <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                onBlur={offEditMode}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistID: string) => void\r\n    setFilterValue: (value: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskId: string, isDoneValue: boolean, todolistID: string) => void\r\n    changeTaskTitle: (taskId: string, editTitle: string, todolistID: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTodolistTitle: (editTitle: string, todolistID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo((props) => {\r\n    console.log('Todolist is calling')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistID)\r\n    }, [props.addTask, props.todolistID])\r\n\r\n    const onAllClickHandler = useCallback(() => props.setFilterValue(\"all\", props.todolistID), [props.setFilterValue, props.todolistID]);\r\n    const onActiveClickHandler = useCallback(() => props.setFilterValue(\"active\", props.todolistID), [props.setFilterValue, props.todolistID]);\r\n    const onCompletedClickHandler = useCallback(() => props.setFilterValue(\"completed\", props.todolistID), [props.setFilterValue, props.todolistID]);\r\n\r\n    const changeTlTitle = useCallback((editTitle: string) => {\r\n        props.changeTodolistTitle(editTitle, props.todolistID);\r\n    },[props.todolistID, props.changeTodolistTitle]);\r\n\r\n\r\n\r\n    /*    const getTasksForTodolist = ()=> {\r\n            switch (props.filter) {\r\n                case \"active\": {\r\n                    return props.tasks.filter(t => !t.isDone);\r\n                }\r\n                case \"completed\": {\r\n                    return props.tasks.filter(t => t.isDone);\r\n                }\r\n                default:\r\n                    return props.tasks;\r\n            }\r\n        }*/\r\n\r\n    let TasksForTodolist =  props.tasks;\r\n    if (props.filter === \"active\") {\r\n        TasksForTodolist =  props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        TasksForTodolist =  props.tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTitle={changeTlTitle}/>\r\n                <IconButton onClick={() => {\r\n                    props.removeTodolist(props.todolistID)\r\n                }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle: \"none\", padding: 0}}>\r\n\r\n                {\r\n                    TasksForTodolist.map(t => {\r\n                        const removeTask = () => props.removeTask(t.id, props.todolistID);\r\n                        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeStatus(t.id, e.currentTarget.checked, props.todolistID);\r\n                        }\r\n\r\n                        const changeTaskTitle = (editTitle: string) => {\r\n                            props.changeTaskTitle(t.id, editTitle, props.todolistID)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\r\n                                <Checkbox\r\n                                    color={\"primary\"}\r\n                                    checked={t.isDone}\r\n                                    onChange={changeTaskStatus}\r\n                                />\r\n                                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                                <IconButton onClick={removeTask}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onAllClickHandler}>All</Button>\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onCompletedClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import {FilterValueType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    editTitle: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\n/*type ActionType = {\r\n    type: string\r\n    [key: string]: any\r\n}*/\r\n\r\nexport type ActionTypes =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport const todolistID_1 = v1();\r\nexport const todolistID_2 = v1();\r\n\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    {id: todolistID_1, title: \"What to learn\", filter: 'all'},\r\n    {id: todolistID_2, title: \"What to buy\", filter: 'all'},\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionTypes): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }, ...state]\r\n        }\r\n        /*        case 'CHANGE-TODOLIST-TITLE': {\r\n                    let todoList = state.find(tl => tl.id === action.id);\r\n                    if (todoList) {\r\n                        todoList.title = action.title\r\n                    }\r\n                    return [...state]\r\n                }*/\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.editTitle} : tl);\r\n        /*case \"CHANGE-TODOLIST-FILTER\": {\r\n            let todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }*/\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", id}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title, todolistId: v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (editTitle: string, id: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id, editTitle}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValueType, id: string): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id, filter}\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistID_1, todolistID_2} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    tasksId: string\r\n    todolistId: string\r\n\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ActionTypes =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState = {\r\n    [todolistID_1]: [\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n    ],\r\n    [todolistID_2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"Bread\", isDone: true},\r\n        {id: v1(), title: \"Beer\", isDone: false},\r\n    ],\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state};\r\n            copyState[action.todolistId] = copyState[action.todolistId].filter(t => t.id !== action.tasksId);\r\n            return copyState;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            let newTask = {id: v1(), title: action.title, isDone: false};\r\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]};\r\n        }\r\n        case 'CHANGE-TASK-STATUS': { // used \".map\" (but used \".find\" at App)\r\n\r\n            let copyState = {...state};\r\n            let updateTask = copyState[action.todolistId].map(task => {\r\n                if (task.id === action.taskId) {\r\n                    return {...task, isDone: action.isDone};\r\n                } else {\r\n                    return task;\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updateTask\r\n            }\r\n        }\r\n        // new\r\n        case \"CHANGE-TASK-TITLE\":\r\n            let copyState = {...state};\r\n            let tasks = copyState[action.todolistId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            /* if (changedValue) {\r\n                 changedValue.title = editTitle;\r\n                 return setTaskData({...tasksData})*/\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return copyState\r\n        case \"ADD-TODOLIST\": {\r\n            let copyState = {...state};\r\n            copyState[action.todolistId] = [];\r\n            return copyState;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (tasksId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", tasksId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n","import React, {useCallback, useReducer} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport {TasksType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {addTodolistAC, removeTodolistAC, todolistsReducer, changeTodolistTitleAC, changeTodolistFilterAC} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type FilterValueType = \"all\"| \"active\"| \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\n\r\n\r\nfunction AppWithRedux() {\r\n    console.log('App is calling')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const todoListsData = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists);\r\n    const tasksData = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n\r\n\r\n\r\n    const RemoveTask = useCallback((taskId: string, todolistID: string) => {\r\n        const action = removeTaskAC(taskId, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const AddTask = useCallback((title: string,todolistID: string ) => {\r\n        const action = addTaskAC(title, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const SetFilterValue = useCallback((filter: FilterValueType, id: string) => {\r\n        const action = changeTodolistFilterAC(filter, id);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((editTitle: string, id: string ) => {\r\n        const action = changeTodolistTitleAC(editTitle, id);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const ChangeStatus = useCallback((taskId: string, isDoneValue: boolean,todolistID: string ) => {\r\n        const action = changeTaskStatusAC(taskId,isDoneValue,todolistID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, editTitle: string,todolistId: string ) => {\r\n        const action = changeTaskTitleAC(taskId,editTitle,todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const RemoveTodolist = useCallback((todolistID: string) => {\r\n        const action = removeTodolistAC(todolistID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const AddTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={AddTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3} >\r\n                    {\r\n                        todoListsData.map(tl => {\r\n\r\n                            /*let TasksForTodolist = tasksData[tl.id];\r\n                            if (tl.filter === \"active\") {\r\n                                TasksForTodolist = TasksForTodolist.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                TasksForTodolist = TasksForTodolist.filter(t => t.isDone);\r\n                            }*/\r\n\r\n\r\n                            /*function getTasksForTodolist(todoList: TodoListType) {\r\n                                switch (tl.filter) {\r\n                                    case \"active\": {\r\n                                        return tasksData[tl.id].filter(t => !t.isDone);\r\n                                    }\r\n                                    case \"completed\": {\r\n                                        return tasksData[tl.id].filter(t => t.isDone);\r\n                                    }\r\n                                    default:\r\n                                        return tasksData[tl.id];\r\n                                }\r\n                            }*/\r\n                            /*const tasksFilter= getTasksForTodolist(tl)*/\r\n\r\n                            let TasksForTodolist=  tasksData[tl.id]; // need rename it\r\n\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={2} style={{padding: \"10px\"}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            title={tl.title}\r\n                                            todolistID={tl.id}\r\n                                            /*tasks={tasksFilter}*/\r\n                                            tasks={TasksForTodolist}\r\n                                            removeTask={RemoveTask}\r\n                                            setFilterValue={SetFilterValue}\r\n                                            addTask={AddTask}\r\n                                            changeStatus={ChangeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={RemoveTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {todolistsReducer} from \"./state/todolists-reducer\";\r\nimport {tasksReducer} from \"./state/tasks-reducer\";\r\nimport {combineReducers, createStore} from 'redux'\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>\r\n\r\nconst RootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n});\r\n\r\n\r\nexport const store = createStore(RootReducer);\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}