{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.tsx","state/tasks-reducer.tsx","AppWithRedux.tsx","state/store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","style","paddingTop","Button","filter","changeFilter","todolistId1","v1","todolistId2","initialState","App","dispatch","useDispatch","useSelector","state","todolists","todolistId","action","type","taskID","todolistID","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","removeTodolistAC","taskId","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","newTodolistId","newTodolist","todolist","find","stateCopy","filteredTasks","task","todolistTasks","copyState","store","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.95a1fb05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {v1} from 'uuid';\r\nimport {FilterValuesType, TodolistType} from \"../App\";\r\n\r\n\r\nexport type removeTodolistAT = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type addTodolistAT = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistID: string\r\n}\r\ntype changeTodolistTitleAT = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\ntype changeTodolistFilterAT = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type todolistsAT = removeTodolistAT\r\n    | addTodolistAT\r\n    | changeTodolistTitleAT\r\n    | changeTodolistFilterAT\r\n\r\nexport const todolistId1 = v1();\r\nexport const todolistId2 = v1();\r\n\r\nconst initialState: Array<TodolistType> = [\r\n    {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n]\r\n\r\nconst todolistsReducer = (state: Array<TodolistType> = initialState, action: todolistsAT): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(t => t.id !== action.id);\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const newTodolistId = action.todolistID\r\n            const newTodolist: TodolistType = {id: newTodolistId, title: action.title, filter: \"all\"}\r\n            return [...state, newTodolist]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n                return [...state]\r\n            }\r\n            return state;\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n                return [...state]\r\n            }\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string): removeTodolistAT => {\r\n    return {type: \"REMOVE-TODOLIST\", id}\r\n}\r\nexport const addTodolistAC = (title: string): addTodolistAT => {\r\n    return {type: \"ADD-TODOLIST\", title, todolistID: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (title: string, id: string): changeTodolistTitleAT => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title, id}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): changeTodolistFilterAT => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter, id}\r\n}\r\n\r\nexport {\r\n    todolistsReducer\r\n}","import React from \"react\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {removeTodolistAT, addTodolistAT, todolistId1, todolistId2} from \"./todolists-reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype removeTaskAT = {\r\n    type: \"REMOVE-TASK\"\r\n    todolistID: string\r\n    taskID: string\r\n\r\n}\r\ntype addTaskAT = {\r\n    type: \"ADD-TASK\"\r\n    todolistID: string\r\n    title: string\r\n}\r\ntype changeTaskStatusAT = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskID: string\r\n    isDone: boolean\r\n    todolistID: string\r\n}\r\ntype changeTaskTitleAT = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    taskID: string\r\n    title: string\r\n    todolistID: string\r\n}\r\n\r\n\r\nexport type tasksAT = removeTaskAT\r\n    | addTaskAT\r\n    | changeTaskStatusAT\r\n    | changeTaskTitleAT\r\n    | addTodolistAT\r\n    | removeTodolistAT\r\n\r\n\r\n\r\nconst initialState = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ]\r\n}\r\n\r\nconst tasksReducer = (state: TasksStateType = initialState, action: tasksAT): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistID];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskID)\r\n            stateCopy[action.todolistID] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            let task = {id: v1(), title: action.title, isDone: false};\r\n            //достанем нужный массив по todolistId:\r\n            let todolistTasks = stateCopy[action.todolistID];\r\n            // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n            stateCopy[action.todolistID] = [task, ...todolistTasks];\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state}\r\n            //достанем нужный массив по todolistId:\r\n            let todolistTasks = stateCopy[action.todolistID];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskID);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n                // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state}\r\n            //достанем нужный массив по todolistId:\r\n            let todolistTasks = stateCopy[action.todolistID];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskID);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.title = action.title;\r\n                // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n                return stateCopy;\r\n            }\r\n            return state;\r\n        }\r\n        case \"ADD-TODOLIST\":{\r\n            const copyState = {...state}\r\n            copyState[action.todolistID] = []\r\n            return copyState;\r\n        }\r\n        case \"REMOVE-TODOLIST\":{\r\n            let copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string): removeTaskAT => {\r\n    return {type: \"REMOVE-TASK\", taskID, todolistID}\r\n}\r\nexport const addTaskAC = (title: string, todolistID: string): addTaskAT => {\r\n    return {type: \"ADD-TASK\", title, todolistID}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): changeTaskStatusAT => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskID, isDone, todolistID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string): changeTaskTitleAT => {\r\n    return {type: \"CHANGE-TASK-TITLE\", taskID, title, todolistID}\r\n}\r\n\r\nexport {\r\n    tasksReducer\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks);\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists);\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTodolistTitle(taskId: string, title: string) {\r\n        const action = changeTodolistTitleAC(taskId, title);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\"\r\nimport { createStore, combineReducers } from \"redux\"\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}